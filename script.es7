/* ----------Canvas-Responsive----------*/
/*-----------Canvas-----------------*/
let promise = require('promise')
let sTimer
let cellsNumb
let config
let validTab = 0
let comptage
let renderTab = []
let initialiseur = 0;
let gridSize
let containerSize
let canvasGrid;
let mecanics
let v = 1
let comptageTab = []
function init(){
config = new Config;
canvasGrid = new CanvasGrid;
mecanics = new Mecanics;
gridSize = document.getElementById('celullarGrid')
/*
let testInterval = setInterval(canvasGrid.setup, 300)
setTimeout(function(){clearInterval(testInterval);},30000) */
canvasGrid.setup()
                }
  class CanvasGrid {
    constructor(cells1) {
      this.cells1 = cells1
    }
  setup(){
  /* cadre externe */
  comptage = 0;
  cellsNumb = document.getElementById('cellsNum').value
  let contain = document.getElementById('canvasContainer')
  let cadre = document.getElementById('celullarGrid');
  let ctx = cadre.getContext("2d");
  let heightC = (contain.offsetHeight)
  let widthC = contain.offsetWidth
  cadre.width = contain.offsetWidth
  cadre.height = (contain.offsetHeight)
 ctx.beginPath();
 ctx.moveTo(0,0);
 ctx.lineTo(widthC,0);
 ctx.lineTo(widthC,heightC);
 ctx.lineTo(0,heightC);
 ctx.lineTo(0,0);
 ctx.fillStyle = "white";
 ctx.fillStroke = "black";
 ctx.stroke();
 ctx.fill();
 ctx.closePath();
  /* cellules individuelles */
  /* initialisation des cellules ET mise en place du tableau qui sera render plus tard */
  if (validTab == 1) {renderTab = []}
  for (var i=(heightC/cellsNumb); i < heightC - heightC/cellsNumb; i+=(heightC/cellsNumb)){
    for(var s=(widthC/cellsNumb); s < widthC - widthC/cellsNumb; s+=(widthC/cellsNumb)){
        comptage ++
        if (initialiseur == 0){
          mecanics.fillGrid()
        }
        else {
          mecanics.gameOfLife()
        }
      }
  }
    validTab = 1
    comptage = 0
    initialiseur = 1
    for (var i=(heightC/cellsNumb); i < heightC- heightC/cellsNumb; i+=(heightC/cellsNumb)){
      for(var s=(widthC/cellsNumb); s < widthC- widthC/cellsNumb; s+=(widthC/cellsNumb)){
            comptage ++
          if ( renderTab[comptage - 1] == 1){
            ctx.beginPath();
            ctx.moveTo(s,i)
            ctx.lineTo((s+(widthC/cellsNumb)),i)
            ctx.lineTo((s+(widthC/cellsNumb)),(i-(widthC/cellsNumb)))
            ctx.lineTo(s,(i-(heightC/cellsNumb)))
            ctx.lineTo(s,i)
            ctx.fillStyle = "black"
            ctx.fillStroke= "black"
            ctx.stroke();
            ctx.fill();
            ctx.closePath();
            comptageTab[comptage-1].etat = 1
        }
          else if ( renderTab[comptage - 1] == 0) {
            ctx.beginPath();
            ctx.moveTo(s,i)
            ctx.lineTo((s+(widthC/cellsNumb)),i)
            ctx.lineTo((s+(widthC/cellsNumb)),(i-(heightC/cellsNumb)))
            ctx.lineTo(s,(i-(heightC/cellsNumb)))
            ctx.lineTo(s,i)
            ctx.fillStyle = "white"
            ctx.fillStroke= "black"
            ctx.stroke();
            ctx.fill();
            ctx.closePath();
            comptageTab[comptage-1].etat = 0
          }
        }
      }
    }
  }
class Config {
  constructor (timerSpeed,gameType) {
    this.timerSpeed = 300
    this.gameType = gameType
  }

  reconfiguration() {
    initialiseur = 0;
    canvasGrid.setup()
  }

  startTimer() {
  clearInterval(sTimer)
  this.timerSpeed = 300
  sTimer = setInterval(canvasGrid.setup, this.timerSpeed)
  }

  stopTimer() {
   clearInterval(sTimer)
  }
  slowTimer() {
    this.timerSpeed = this.timerSpeed*1.5
    clearInterval(sTimer)
    sTimer = setInterval(canvasGrid.setup, this.timerSpeed)

  }
  fastTimer() {
    this.timerSpeed = this.timerSpeed/1.5
    clearInterval(sTimer)
    sTimer = setInterval(canvasGrid.setup, this.timerSpeed)
  }
              }
class Mecanics {
  constructor (tabY,tabX,){
  this.tabY = tabY
  this.tabX = tabX
}
gameOfLife() {
if (comptageTab[comptage-1].etat == 0){
  let verifTab = []
   if (comptageTab[(comptage-1)+(cellsNumb-2)+1] != undefined){verifTab.push(comptageTab[(comptage-1)+(cellsNumb-2)+1].etat)}
   if (comptageTab[(comptage-1)+(cellsNumb-2)] != undefined){verifTab.push(comptageTab[(comptage-1)+(cellsNumb-2)].etat)}
   if (comptageTab[(comptage-1)+(cellsNumb-2)-1] != undefined){verifTab.push(comptageTab[(comptage-1)+(cellsNumb-2)-1].etat)}
   if (comptageTab[comptage] != undefined){verifTab.push(comptageTab[comptage].etat)}
   if (comptageTab[(comptage-1)-(cellsNumb-2)+1] != undefined){verifTab.push(comptageTab[(comptage-1)-(cellsNumb-2)+1].etat)}
   if (comptageTab[(comptage-1)-(cellsNumb-2)] != undefined){verifTab.push(comptageTab[(comptage-1)-(cellsNumb-2)].etat)}
   if (comptageTab[(comptage-1)-(cellsNumb-2)-1] != undefined){verifTab.push(comptageTab[(comptage-1)-(cellsNumb-2)-1].etat)}
   if (comptageTab[comptage-2] != undefined){verifTab.push(comptageTab[comptage-2].etat)}
   let resultatsFiltre = verifTab.filter(function(verifTab){ return verifTab == 1})
    if (resultatsFiltre.length == 3){
      renderTab.push(1)
    }
    else {
      renderTab.push(0)
    }

}
else if ((comptageTab[comptage-1].etat) == 1) {
  let verifTab = []
  if (comptageTab[(comptage-1)+(cellsNumb-2)+1] != undefined){verifTab.push(comptageTab[(comptage-1)+(cellsNumb-2)+1].etat)}
  if (comptageTab[(comptage-1)+(cellsNumb-2)] != undefined){verifTab.push(comptageTab[(comptage-1)+(cellsNumb-2)].etat)}
  if (comptageTab[(comptage-1)+(cellsNumb-2)-1] != undefined){verifTab.push(comptageTab[(comptage-1)+(cellsNumb-2)-1].etat)}
  if (comptageTab[comptage] != undefined){verifTab.push(comptageTab[comptage].etat)}
  if (comptageTab[(comptage-1)-(cellsNumb-2)+1] != undefined){verifTab.push(comptageTab[(comptage-1)-(cellsNumb-2)+1].etat)}
  if (comptageTab[(comptage-1)-(cellsNumb-2)] != undefined){verifTab.push(comptageTab[(comptage-1)-(cellsNumb-2)].etat)}
  if (comptageTab[(comptage-1)-(cellsNumb-2)-1] != undefined){verifTab.push(comptageTab[(comptage-1)-(cellsNumb-2)-1].etat)}
  if (comptageTab[comptage-2] != undefined){verifTab.push(comptageTab[comptage-2].etat)}
  let resultatsFiltre = verifTab.filter(function(verifTab){ return verifTab == 1})
  if ((resultatsFiltre.length == 2)||(resultatsFiltre.length == 3)) {
    renderTab.push(1)
  }
  else {
    renderTab.push(0)
  }

                                    }
  }
  fillGrid(){
  let hasard = Math.floor(Math.random()*100)
  if (hasard <= document.getElementById('cellsVal').value){
     renderTab.push(1)
     comptageTab.push({ident: comptage-1, etat: 1})
            }
  else  {
     renderTab.push(0)
     comptageTab.push({ident: comptage-1, etat: 0})
        }
            }
}
